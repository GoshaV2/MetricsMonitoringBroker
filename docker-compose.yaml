version: "1"

services:

  api.metricsproducer:
    build:
      context: ./metricsproducer
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      options:
        max-size: "10m"
    container_name: api.metricsproducer
    env_file:
      - .env
    ports:
      - "8000:8080"
    networks:
      - t1
    depends_on:
      - kafka

  api.metricsconsumer:
    build:
      context: ./metricsconsumer
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      options:
        max-size: "10m"
    container_name: api.metricsconsumer
    env_file:
      - .env
    ports:
      - "8001:8081"
    networks:
      - t1
    depends_on:
      - kafka
      - postgres

  postgres:
    image: postgres:15
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      options:
        max-size: "10m"
    container_name: postgres
    volumes:
      - /docker/postgres/data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5430:5432"
    networks:
      - t1


  zookeeper:
    user: root
    networks:
      - t1
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      options:
        max-size: "10m"
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - /docker/zk-data:/var/lib/zookeeper/data
      - /docker/zk-txn-logs:/var/lib/zookeeper/log
  kafka:
    user: root
    networks:
      - t1
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      options:
        max-size: "10m"
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - /docker/kafka/data:/var/lib/kafka/data

#  kafka-ui:
#    image: provectuslabs/kafka-ui
#    container_name: kafka-ui
#    ports:
#      - "9600:8080"
#    environment:
#      - KAFKA_CLUSTERS_0_NAME=develop
#      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
#      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
#      - KAFKA_MESSAGE_MAX_BYTES=50000000


networks:
  t1:
    driver: bridge